<?php

namespace frontend\forms\customer;

use borales\extensions\phoneInput\PhoneInputValidator;
use common\entities\City;
use common\entities\Country;
use common\entities\Customer;
use yii\base\Model;
use yii\helpers\ArrayHelper;

class ProfileForm extends Model
{
    public $firstName;
    public $lastName;
    public $phone;
    public $fatherName;//отчество
    public $country;
    public $countryId;
    public $city;
    public $cityName;
    public $street;
    public $house;//дом
    public $state;//штат/область
    public $apartment;//квартира
    public $porch;//подьезд
    public $index;
    public $dateBirth;//дата рождения
    public $gender;//дата рождения

    public function __construct(Customer $customer, $config = [])
    {
        if (isset($customer->profile)) {
            $this->firstName = $customer->profile->first_name;
            $this->lastName = $customer->profile->last_name;
            $this->phone = $customer->profile->phone;
            $this->fatherName = $customer->profile->father_name;
            $this->countryId = $customer->profile->country_id;
            $this->city = $customer->profile->city_id;
            $this->cityName = $customer->profile->city_name;
            $this->street = $customer->profile->street;
            $this->state = $customer->profile->state;
            $this->house = $customer->profile->house;
            $this->apartment = $customer->profile->apartment;
            $this->porch = $customer->profile->porch;
            $this->index = $customer->profile->index;
            $this->dateBirth = $customer->profile->date_birth;
            $this->gender = $customer->profile->gender;
        }

        parent::__construct($config);
    }

    public function rules(): array
    {
        return [
            [['firstName', 'lastName', 'fatherName', 'country', 'city', 'cityName', 'street', 'house', 'state', 'apartment', 'porch', 'dateBirth', 'index', 'phone', 'countryId'], 'safe'],
            [['phone', 'gender'], 'string'],
            [['dateBirth'], 'date', 'format' => 'php:Y-m-d'],
            [['phone'], PhoneInputValidator::class],
        ];
    }

    public function attributeLabels()
    {
        return [
            'firstName' => '',
            'lastName' => '',
            'phone' => '',
            'fatherName' => '',
            'country' => '',
            'city' => '',
            'cityName' => '',
            'state' => '',
            'house' => '',
            'street' => '',
            'apartment' => '',
            'porch' => '',
            'index' => '',
            'dateBirth' => '',
            'gender' => '',
        ];
    }

    public function beforeValidate()
    {
        //установка кода страны
        $this->setCountryId();
        $this->setCities();

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function getCities()
    {
        return ArrayHelper::map(City::find()->asArray()->orderBy(['status' => SORT_DESC])->all(), 'id', function (array $city) {
            return $city['name'];
        });
    }

    private function setCountryId()
    {
        /**@var $country Country */
        $country = Country::find()->where(['code' => $this->countryId])->one();
        $this->countryId = $country->getCode();
        $this->country = $country->getName();
    }

    public function setCities()
    {
        //если это Украина по коду находим название город, записываем
        if ($this->countryId == Country::UKRAINE_CODE) {
            $city = City::find()->where(['id' => $this->city])->one();
            $this->cityName = $city->name;
        }
    }
}
