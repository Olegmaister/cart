<?php
namespace common\forms\customer;

use borales\extensions\phoneInput\PhoneInputBehavior;
use borales\extensions\phoneInput\PhoneInputValidator;
use common\entities\Customer;
use Yii;
use yii\base\Model;

/**
 * Signup form
 */
class SignupForm extends Model
{
    public $username;
    public $lastName;
    public $email;
    public $password;
    public $repeatPassword;
    public $phone;

    public $countryCode;


    public function behaviors()
    {
        return [
            [
                'class' => PhoneInputBehavior::class,
                'countryCodeAttribute' => 'countryCode',
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            ['username', 'trim'],
            ['username', 'required'],
            ['phone', 'required'],
            ['lastName', 'required'],
            ['username', 'string', 'min' => 2, 'max' => 255],

            ['email', 'trim'],
            ['email', 'safe'],
            ['email', 'email'],
            ['email', 'string', 'max' => 255],
            ['phone', 'checkDateFormat'],
            ['email', 'unique', 'targetClass' => '\common\entities\Customer', 'message' => 'This email address has already been taken.'],
            //['phone', 'unique', 'targetClass' => '\common\entities\Customer', 'message' => 'This phone address has already been taken.'],
            [['phone'], PhoneInputValidator::class],

            ['password', 'required'],
            ['repeatPassword', 'required'],
            ['repeatPassword', 'compare', 'compareAttribute' => 'password'],
            ['password', 'string', 'min' => 6],
        ];
    }

    public function checkDateFormat($attribute, $params)
    {
        if(Customer::find()
            ->where(['phone' => str_replace('+','',$this->phone)])
            ->one()){

            $this->addError($attribute, Yii::t('phone', 'Такой пользователь уже существут'));
        }

    }


    public function attributeLabels()
    {
        return [
            'username' => '',
            'lastName' => Yii::t('app', 'Surname'),
            'language_id' => '',
            'name' => Yii::t('app', 'name'),
            'email' => Yii::t('app', 'email'),
            'phone' => Yii::t('app', 'phone'),
            'password' => Yii::t('app', 'password'),
            'repeatPassword' => Yii::t('app', 'Repeat password'),
        ];
    }
    /**
     * Signs user up.
     *
     * @return bool whether the creating new account was successful and email was sent
     */


    function RandomString()
    {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $randstring = '';
        for ($i = 0; $i < 9; $i++) {
            $randstring .= $characters[rand(0, strlen($characters))];
        }
        return $randstring;
    }


    public function signup()
    {
        if (!$this->validate()) {
            return null;
        }


        $salt = $this->RandomString();
        $password = sha1($salt . sha1($salt . sha1($this->password)));


        $customer = new Customer();
        $customer->username = $this->username;
        $customer->email = $this->email;
        $customer->salt = $salt;
        $customer->password = $password;
        $customer->setPassword($this->password);
        $customer->generateAuthKey();
        $customer->generateEmailVerificationToken();
        return $customer->save() && $this->sendEmail($customer);

    }


    public function checkEmailOrPhone() : bool
    {

        if(empty($this->email) && empty($this->phone)){
            $this->addError('email','Одно из полей должно быть заполнено');
            $this->addError('phone','Одно из полей должно быть заполнено');
            return false;
        }

        return true;
    }

//    public function beforeValidate()
//    {   $this->phone =  str_replace ('+','',$this->phone);
//        return parent::beforeValidate(); // TODO: Change the autogenerated stub
//    }

    /**
     * Sends confirmation email to user
     * @param User $user user model to with email should be send
     * @return bool whether the email was sent
     */
    protected function sendEmail($user)
    {
        return Yii::$app
            ->mailer
            ->compose(
                ['html' => 'emailVerify-html', 'text' => 'emailVerify-text'],
                ['user' => $user]
            )
            ->setFrom([Yii::$app->params['supportEmail'] => Yii::$app->name . ' robot'])
            ->setTo($this->email)
            ->setSubject('Account registration at ' . Yii::$app->name)
            ->send();
    }
}
